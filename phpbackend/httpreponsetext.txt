Sige! Let's go step by step. Since gusto mo matutunan ang **different HTTP responses**, mahirap ito i-grasp kung walang context, kaya ipapakita ko sa tatlong parts: **status codes**, **meaning**, at **example usage sa PHP o backend**.

---

## **1️⃣ HTTP Status Codes: Overview**

HTTP responses usually have **3 parts**:

1. **Status Code** – a 3-digit number indicating the result of the request.
2. **Status Text** – a short description of the status code.
3. **Response Body** – optional data sent back (JSON, HTML, text, etc.).

HTTP status codes are grouped in **5 categories**:

| Category      | Range   | Meaning                               |
| ------------- | ------- | ------------------------------------- |
| Informational | 100–199 | Request received, processing          |
| Success       | 200–299 | Request succeeded                     |
| Redirection   | 300–399 | Client must take additional action    |
| Client Error  | 400–499 | Problem with request (client’s fault) |
| Server Error  | 500–599 | Problem on server side                |

---

## **2️⃣ Common HTTP Response Codes**

### **Success (200s)**

| Code | Meaning                                       | Example                                 |
| ---- | --------------------------------------------- | --------------------------------------- |
| 200  | OK – everything worked                        | Returning user data after GET request   |
| 201  | Created – resource created                    | After POST request to create a new user |
| 204  | No Content – successful but nothing to return | After DELETE request                    |

### **Client Error (400s)**

| Code | Meaning              | Example                                     |
| ---- | -------------------- | ------------------------------------------- |
| 400  | Bad Request          | Invalid JSON sent to API                    |
| 401  | Unauthorized         | User tries to access resource without login |
| 403  | Forbidden            | User logged in but not allowed to access    |
| 404  | Not Found            | Requested page/resource doesn’t exist       |
| 422  | Unprocessable Entity | Validation error in data                    |

### **Server Error (500s)**

| Code | Meaning               | Example                         |
| ---- | --------------------- | ------------------------------- |
| 500  | Internal Server Error | Something broke in server code  |
| 502  | Bad Gateway           | Server acting as gateway failed |
| 503  | Service Unavailable   | Server temporarily down         |

---

## **3️⃣ Examples in PHP (Native or API)**

### **Returning 200 OK**

```php
header("Content-Type: application/json");
http_response_code(200);

echo json_encode([
    "status" => "success",
    "message" => "Data fetched successfully",
    "data" => ["id"=>1, "name"=>"John"]
]);
```

### **Returning 201 Created**

```php
header("Content-Type: application/json");
http_response_code(201);

echo json_encode([
    "status" => "success",
    "message" => "User created successfully",
    "user_id" => 101
]);
```

### **Returning 400 Bad Request**

```php
header("Content-Type: application/json");
http_response_code(400);

echo json_encode([
    "status" => "error",
    "message" => "Invalid request data"
]);
```

### **Returning 404 Not Found**

```php
header("Content-Type: application/json");
http_response_code(404);

echo json_encode([
    "status" => "error",
    "message" => "User not found"
]);
```

---

💡 **Tip:**

* Always use **status codes** that match the situation.
* Frontend usually checks `status code` first, then the body.

---

Kung gusto mo, puwede rin kitang turuan ng **more advanced responses tulad ng redirects (301, 302), or JSON API error formats** para mas complete yung knowledge mo sa HTTP.

Gusto mo ba na ituro ko rin yun?
